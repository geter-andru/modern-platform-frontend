/**
 * SIMPLIFIED PDF Export API
 * Returns HTML content for client-side PDF generation
 * Avoids server-side PDF library dependencies
 */

import { NextRequest, NextResponse } from 'next/server';

interface ExportRequest {
  content: string;
  title: string;
  metadata?: {
    author?: string;
    companyName?: string;
    createdAt?: string;
  };
}

export async function POST(request: NextRequest) {
  console.log('üìÑ PDF Export API called - returning HTML for client-side PDF');
  
  try {
    const body: ExportRequest = await request.json();
    const { content, title, metadata } = body;
    
    if (!content || !title) {
      return NextResponse.json(
        { error: 'Content and title are required' },
        { status: 400 }
      );
    }

    console.log(`üìä Preparing PDF-ready HTML: "${title}"`);
    
    // Return PDF-ready HTML for client-side processing
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>${title}</title>
  <style>
    @media print {
      body { margin: 0; }
    }
    body { 
      font-family: Arial, sans-serif; 
      max-width: 700px; 
      margin: 20px auto; 
      padding: 20px;
      line-height: 1.6;
    }
    .header {
      text-align: center;
      border-bottom: 2px solid #8B5CF6;
      padding-bottom: 20px;
      margin-bottom: 30px;
    }
    .company {
      color: #8B5CF6;
      font-size: 24px;
      font-weight: bold;
      margin-bottom: 10px;
    }
    .title {
      font-size: 20px;
      color: #333;
    }
    .metadata {
      color: #666;
      font-size: 12px;
      text-align: right;
      margin: 20px 0;
    }
    h1 { color: #333; font-size: 18px; margin-top: 25px; }
    h2 { color: #444; font-size: 16px; margin-top: 20px; }
    h3 { color: #555; font-size: 14px; margin-top: 15px; }
    ul { margin: 10px 0; padding-left: 20px; }
    li { margin: 5px 0; }
    .footer {
      text-align: center;
      color: #999;
      font-size: 10px;
      margin-top: 40px;
      border-top: 1px solid #eee;
      padding-top: 20px;
    }
  </style>
</head>
<body>
  <div class="header">
    <div class="company">${metadata?.companyName || 'H&S Revenue Intelligence'}</div>
    <div class="title">${title}</div>
  </div>
  
  ${metadata?.createdAt ? `<div class="metadata">Generated: ${new Date(metadata.createdAt).toLocaleDateString()}</div>` : ''}
  
  <div class="content">
    ${markdownToHTML(content)}
  </div>
  
  <div class="footer">
    Generated by H&S Revenue Intelligence Platform
  </div>
</body>
</html>`;

    console.log(`‚úÖ PDF-ready HTML prepared`);
    
    // Return HTML with instructions for client-side PDF generation
    return NextResponse.json({
      success: true,
      html: htmlContent,
      title,
      instructions: 'Use browser print-to-PDF or client-side library',
      real: true
    });
    
  } catch (error: any) {
    console.error('‚ùå PDF preparation error:', error);
    
    return NextResponse.json(
      { 
        error: 'PDF preparation failed',
        message: error.message,
        real: true
      },
      { status: 500 }
    );
  }
}

// Helper function to convert markdown to HTML
function markdownToHTML(markdown: string): string {
  return markdown
    .replace(/^# (.*$)/gim, '<h1>$1</h1>')
    .replace(/^## (.*$)/gim, '<h2>$1</h2>')
    .replace(/^### (.*$)/gim, '<h3>$1</h3>')
    .replace(/^\* (.+)/gim, '<li>$1</li>')
    .replace(/^- (.+)/gim, '<li>$1</li>')
    .replace(/(<li>.*<\/li>)/gm, '<ul>$1</ul>')
    .replace(/<\/ul>\s*<ul>/gm, '') // Merge consecutive lists
    .replace(/\n\n/gim, '</p><p>')
    .replace(/^(?!<[uh])/gm, '<p>')
    .replace(/(?<![>])$/gm, '</p>')
    .replace(/<p><\/p>/gm, '')
    .replace(/<p>(<[uh])/gm, '$1')
    .replace(/(<\/[uh][1-6]?>)<\/p>/gm, '$1');
}

// GET endpoint for testing
export async function GET() {
  return NextResponse.json({
    status: 'Simplified PDF Export API is running',
    endpoint: '/api/export/pdf',
    note: 'Returns HTML for client-side PDF generation to avoid dependencies',
    real: true,
    approach: 'Client-side PDF generation'
  });
}